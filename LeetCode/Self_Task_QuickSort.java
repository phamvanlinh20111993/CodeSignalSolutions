package LeetCode;

public class Self_Task_QuickSort {

	public static void quickSort(int[] arr, int l, int r) {

		int m = (l + r) / 2;

		if (m <= l || m >= r)
			return;

		int i = l, j = r;
		int pivot = arr[m];
		
		System.out.println("Before, pivot=" + pivot + ", l=" + l + ", r=" + r);
		for (int ind = l; ind <= r; ind++) {
			System.out.print(arr[ind] + " ");
		}

		while (i <= j) {
			if (arr[i] <= pivot && i != m) {
				i++;
				continue;
			}
			if (arr[j] >= pivot && j != m) {
				j--;
				continue;
			}
		
			int tmp = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp;
			
			i++;
			j--;
		}
		
		System.out.println("\ni " + i + ", " + j);

		System.out.println("\nAfter");
		for (int ind = l; ind <= r; ind++) {
			System.out.print(arr[ind] + " ");
		}
		System.out.println();

		quickSort(arr, l, m);
		quickSort(arr, m + 1, r);
	}

	public static void main(String[] args) {
		// int[] arr = new int[] { 31, 5, 15, 24, 22, 213, 14, 22, 6, 7, 11, 3, 5 };
		// int[] arr = new int[] {22, 213, 22, 24, 15, 31 };
		// int[] arr = new int[] {24, 213, 31 };
		// int[] arr = new int[] {31, 5, 15, 24, 22, 213, 14, 22, 6, 7, 11, 3, 5 };
		int [] arr = new int[] {5,5,3,6 };
		quickSort(arr, 0, arr.length - 1);

		System.out.println("Output: ");
		for (int ind = 0; ind < arr.length; ind++) {
			System.out.print(arr[ind] + " ");
		}
		/*
		System.out.println("\n########################################################");
		int[][] randomArrays = {
				{ 453, 231, -88, 937, 613, 154, 823, 541, 20, 102, 661, -37, 349, 900, 485, 208, 961, 649, 816, -85,
						386, 804, 39, 667, 727, 233, 932, 533, -5, 477, 64, 719, 913, 187 },
				{ 621, 866, 541, 932, 547, 630, -3, 274, -81, 97, 183, 562, 977, 147, 164, 498, 759, 902, 189, 143, 45,
						203, 884, 613, 320, -70, 407, 332, 344, 92, 489, 936, 1 },
				{ -25, 304, 728, 167, 243, 762, 936, 893, -36, 911, 340, 688, 547, 154, 996, 486, -6, 801, 678, 81, 218,
						697, 1000, 204, -19, 457, 459, 338, 315, 132 },
				{ 960, -88, 583, 772, 149, 787, 574, 701, 594, 202, 942, 379, 301, 265, 885, 325, 695, 448, 222, 83,
						342, 986, 31, 636, -25, 961, 684, 47, 465, 265, 871, 415, 312, -27, 230 },
				{ 764, 522, 808, 309, 429, 972, 662, 145, 433, 985, 364, 10, 285, 438, 320, 44, 282, 998, 435, 626, 846,
						-56, 139, 287, 675, 102, 615, 976, 632, 879 },
				{ 282, 204, 278, 950, 9, 285, 807, 998, -7, 394, 736, 51, 384, 88, 223, 729, 901, 284, 737, 591, 180,
						-4, 615, 605, 337, 197, 724, 37, 160, 519, 398, 592 },
				{ 59, 146, 796, 531, 670, 875, -83, 187, 621, 57, 876, 926, 394, 313, 493, 359, 383, 857, 961, 781, 216,
						457, 484, 256, 814, 749, 72, 503, 972, 279, 726 },
				{ -52, 682, 971, 902, 893, 670, 156, 744, 251, 318, 17, 560, 373, 372, 82, 393, 408, 278, 473, 41, 663,
						-47, 347, 203, 655, 594, 683, 837, 114, 876, 149, 930, 866 },
				{ 706, 842, -53, 46, 251, 416, 272, 995, 791, 810, 321, 863, 636, 849, 676, 825, 352, 732, 278, 607,
						329, 254, 195, 951, 799, 917, -96, 580, 880 },
				{ 913, 765, 312, 549, -55, 981, 284, 125, 673, 180, 101, 53, 355, 732, 754, 599, 254, 838, 934, 745,
						682, 378, 156, 290, 586, 277, 238, 771, 199, 879, 293, 652 } };

		for (int i = 0; i < randomArrays.length; i++) {
			int[] arr1 = randomArrays[i];
			quickSort(arr1, 0, arr1.length - 1);

			System.out.println("\nOutput: ");
			for (int ind = 0; ind < arr1.length; ind++) {
				System.out.print(arr1[ind] + " ");
			}
			break;
		} */
	}

}
